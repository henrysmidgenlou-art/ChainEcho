<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solana Dev Token Tracker</title>
    <style>
        body { 
            background: black; 
            color: white; 
            font-family: Arial, sans-serif; 
            padding: 20px; 
            margin: 0; 
        }
        h1 { 
            color: #8a2be2; 
            text-align: center; 
            margin-bottom: 20px; 
        }
        #ca { 
            width: 100%; 
            padding: 15px; 
            background: #111; 
            border: 1px solid #444; 
            color: white; 
            margin-bottom: 10px; 
            border-radius: 5px; 
            box-sizing: border-box; 
        }
        #scan-btn { 
            width: 100%; 
            padding: 15px; 
            background: #8a2be2; 
            color: white; 
            font-size: 18px; 
            border: none; 
            cursor: pointer; 
            border-radius: 5px; 
            font-weight: bold; 
        }
        #scan-btn:hover { 
            background: #7b1fa2; 
        }
        #loading { 
            color: #8a2be2; 
            text-align: center; 
            display: none; 
            margin: 10px 0; 
        }
        #results { 
            margin-top: 20px; 
            background: #111; 
            padding: 20px; 
            border-radius: 10px; 
            display: none; 
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
            margin-top: 10px; 
        }
        th { 
            background: #8a2be2; 
            color: white; 
            padding: 10px; 
        }
        td { 
            padding: 10px; 
            border-bottom: 1px solid #333; 
        }
        a { 
            color: #8a2be2; 
            text-decoration: none; 
        }
        a:hover { 
            text-decoration: underline; 
        }
        .error { 
            color: red; 
            text-align: center; 
        }
        h3, h4 { 
            color: #8a2be2; 
        }
    </style>
</head>
<body>
    <h1>ü™ô Solana Dev Token Tracker</h1>
    
    <input id="ca" placeholder="Paste any Solana token CA here (e.g., EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v)">
    
    <button id="scan-btn">üîç Scan Token</button>
    
    <div id="loading">‚è≥ Scanning blockchain... (10-20 seconds)</div>
    
    <div id="results">
        <div id="output"></div>
    </div>

    <script>
        document.getElementById('scan-btn').addEventListener('click', scanToken);

        async function scanToken() {
            const ca = document.getElementById('ca').value.trim();
            if (!ca || ca.length !== 44) {
                alert('Please enter a valid 44-character Solana token CA');
                return;
            }

            const loading = document.getElementById('loading');
            const results = document.getElementById('results');
            const output = document.getElementById('output');
            const btn = document.getElementById('scan-btn');

            loading.style.display = 'block';
            results.style.display = 'block';
            output.innerHTML = '';
            btn.disabled = true;
            btn.textContent = 'Scanning...';

            try {
                // Step 1: Get token metadata from Helius
                const metaRes = await fetch(`https://api.helius.xyz/v0/tokens/${ca}/metadata?api-key=00000000000000000000000000000000`);
                const meta = await metaRes.json();
                if (!meta || meta.length === 0) {
                    throw new Error('Invalid token CA - no metadata found');
                }
                const tokenInfo = meta[0];

                // Step 2: Get oldest transaction (creation tx) from Solana RPC
                const sigsRes = await fetch('https://api.mainnet-beta.solana.com', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        jsonrpc: '2.0',
                        id: 1,
                        method: 'getSignaturesForAddress',
                        params: [ca, { limit: 1, order: 'asc' }]
                    })
                });
                const sigsData = await sigsRes.json();
                if (!sigsData.result || sigsData.result.length === 0) {
                    throw new Error('No transactions found for this token');
                }
                const creationSig = sigsData.result[0].signature;

                // Step 3: Get creation tx details to find dev wallet (fee payer)
                const txRes = await fetch('https://api.mainnet-beta.solana.com', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        jsonrpc: '2.0',
                        id: 1,
                        method: 'getTransaction',
                        params: [creationSig, { encoding: 'json', maxSupportedTransactionVersion: 0 }]
                    })
                });
                const txData = await txRes.json();
                if (!txData.result || !txData.result.transaction) {
                    throw new Error('Could not fetch creation transaction details');
                }
                const devWallet = txData.result.transaction.message.accountKeys[0];

                // Step 4: Get dev's recent txs (last 10)
                const devSigsRes = await fetch('https://api.mainnet-beta.solana.com', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        jsonrpc: '2.0',
                        id: 1,
                        method: 'getSignaturesForAddress',
                        params: [devWallet, { limit: 10 }]
                    })
                });
                const devSigsData = await devSigsRes.json();
                if (!devSigsData.result) {
                    throw new Error('Could not fetch developer transactions');
                }

                // Step 5: Scan for other tokens in dev's txs
                const otherTokens = new Set();
                for (const sig of devSigsData.result.slice(0, 5)) { // Limit to 5 for speed
                    if (sig.signature === creationSig) continue;

                    const otherTxRes = await fetch('https://api.mainnet-beta.solana.com', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            jsonrpc: '2.0',
                            id: 1,
                            method: 'getTransaction',
                            params: [sig.signature, { encoding: 'json', maxSupportedTransactionVersion: 0 }]
                        })
                    });
                    const otherTxData = await otherTxRes.json();

                    if (otherTxData.result && otherTxData.result.transaction) {
                        const accounts = otherTxData.result.transaction.message.accountKeys;
                        accounts.forEach(acc => {
                            if (acc.pubkey && acc.pubkey !== ca && acc.pubkey.length === 44 && !otherTokens.has(acc.pubkey)) {
                                otherTokens.add(acc.pubkey);
                            }
                        });
                    }
                }

                // Step 6: Build results HTML
                let html = `
                    <h3>‚úÖ Token Analyzed Successfully!</h3>
                    <p><strong>Token Name:</strong> ${tokenInfo.name || 'Unknown'} (${tokenInfo.symbol || 'N/A'})</p>
                    <p><strong>Address:</strong> ${ca.slice(0, 8)}...</p>
                    <p><strong>Developer Wallet:</strong> <a href="https://solscan.io/account/${devWallet}" target="_blank">${devWallet}</a></p>
                `;

                const otList = Array.from(otherTokens);
                if (otList.length > 0) {
                    html += `<h4>üîç Found ${otList.length} Potential Related Tokens (Last 10 Txs):</h4>
                    <table>
                        <tr><th>Token Address</th><th>View on Solscan</th></tr>`;
                    otList.slice(0, 5).forEach(token => {
                        html += `<tr><td>${token.slice(0, 8)}...</td><td><a href="https://solscan.io/token/${token}" target="_blank">View</a></td></tr>`;
                    });
                    html += '</table>';
                } else {
                    html += '<p><strong>No other tokens detected in recent transactions.</strong> Check full dev wallet on Solscan!</p>';
                }

                output.innerHTML = html;

            } catch (error) {
                output.innerHTML = `<p class="error">‚ùå Error: ${error.message}<br><small>Tip: Try a different CA or check console (F12) for details.</small></p>`;
                console.error('Scan Error:', error);
            } finally {
                loading.style.display = 'none';
                btn.disabled = false;
                btn.textContent = 'üîç Scan Token';
            }
        }
    </script>
</body>
</html>
